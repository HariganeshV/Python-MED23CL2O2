# -*- coding: utf-8 -*-
"""2 AUG 25 Python Basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1fBtj5guSQrQ2_Mhd-B3lEgPd3CxI53
"""

import os # importing operating system packages
#Get the current directory
os.getcwd() # cwd stands for current working directory
#os.setcwd('/content/sample_data')
os.chdir('/content/sample_data')

"""#Variables and data type"""

x=5
x

x+2

str(5), str(True)

"""##int() #integer ()function call
The data types supported to python as
int (integer)

float(floating point values)

bool (boolean)

str (string)
"""

int(1),int(5)

"""#List"""

a='is'
b='nice'
my_list= ['my','list',a,b]
my_list2= [[4,5,6,7],[3,4,5,6]]
my_list

my_list[1]

my_list[-3]

my_list[1:3]

"""Python lists are zero indexed(the first element has index 0)"""

x1= ['a','b','c','d','e']

x=[1,2,3]
y=[10,20,30]
z=[x,y] # to include two listed separated by comma
print (z)
u= x+y # to join two lists
print (u)

"""#ACCESSING THE ELEMENT OF A LIST"""

#select the 0th element of the list x
print (x)
x[0]

#select last element in the list
x[-1]

#select 1st inclusive and 3rd exclusive
x[1:3] # in the range field value is included while the last value is excluded

#select 2nd to the end of x1= ['a','b','c','d','e']
x1[2:]

#select 0th to 3rd exclusive x1= ['a','b','c','d','e']
x1[:3]

#list operation : comma , ,*
y=[10,20,30]
y*2

y+y

"""#4 Aug 2025

**Operators in Python**
"""

#Operators in Python
102+37 # Add 2 no. with +
102-37 #Subtract a no. with -
4*6 # Multiply 2 no. with *
22/7 #Divide a no. by another with /
22//7 #Integer divide a no. with //
22 % 7 # It is mod operator

102+37 # Add 2 no. with +

102-37 #Subtract a no. with -

4*6 # Multiply 2 no. with *

22/7 #Divide a no. by another with /

22//7 #Integer divide a no. with //

22 % 7 # It is mod operator

#Assignment operator
a=5 # assign a value to a
print(a)
#x[0] = 1 not possible ie. , directly do not change an item in a list
x=[10,23,45]
x[0] = 1 #change the list value at index 0
print(x)

"""#Relational operation in python
3==3 #test for equality with ==

3!=3 #test for inequality with !=

3>1 #test greater than with >

3>= 3 #test greater than or equal to with >=

3<4 # test less than with <

3<=4 # test less than or equal to with <=
"""

3==3 #test for equality with ==

3!=3 #test for inequality with !=

3>1 #test greater than with >

3>= 3 #test greater than or equal to with >=

3<4 # test less than with <

3<=4 # test less than or equal to with <=

"""#Logical operator
not (2==2) #using logical not

(1!=1) and (1<1) #using logical and

(1>=1) or (1<1) #using logical or
"""

not (2==2) #using logical not

(1!=1) and (1<1) #using logical and

(1>=1) or (1<1) #using logical or

"""**Python inbulit data structures**
1. LIST
2.TUPLE
3.DICTIONARY
4.SET

List: Ordered, mutable collections that can store items or different data types .They defined using square brackets []
"""

my_list = [1, "hello", 3.14]
my_list

"""Tuples:Ordered, immutable collections, meaning their contents cannot be changed a creation. They are defined using parentheses ()"""

my_tuple = (10,"world",True)
my_tuple

"""Sets:Unordered collections of unique elements .They do not allow duplicate values and are defined using curly braces {} or set () constructor"""

my_set ={1,2,3,2} #my_set will be {1,2,3}
my_set

"""Dictionary:Unordered collections of key-value pairs,where each key must be unqiue .They are defined using curly braces {} with key-value pairs separated by colons"""

my_dict = {"name":"Alice","age":30}
my_dict

my_dict = {"name":"Hg","age":18,"grade":"Ug"}
my_dict

"""List methods"""

my_list = ['a','e','i','o','u']
my_list.index('o')

my_list.index('a')

my_list.count('i')

my_list.append('1')
my_list

my_list.remove('1')
my_list

del(my_list[0:1]) #remove an item from list
my_list

my_list.reverse()
my_list

my_list.extend('$')
my_list

#Extend is same as append (adding elemrnt at last of list)but it can extend a
# list with another list
my_cars = ["FORD","BMW"]
my_list.extend(my_cars)
my_list
#Differences between append() and extend()
#append can add only a single elements at the end of a list

my_list.pop(-2)
my_list

my_list.insert(0,'!')
my_list

my_list.sort()
my_list

"""#String"""

my_string ="Welcome to python programming"
my_string

my_string[0]

my_string[5:10] #print characters starting from index 0 excluding 9

my_string.upper()

my_string.lower()

my_string.count('m')

my_string.replace('e','m')

"""#11 Aug 2025

#List Processing in Python

STEPS:

1.Create a empty result list

2.Keep a total variable starting at 0

3.Loop through each number

4.Add to total , append total to result

**Running sum**
"""

#Running sum   Sample ip=10,20,5,1  Expected op=10,30,35,36
def runningSum(nums):
  result = [] #Empty list
  total = 0 #Initialist total to zero
  for n in nums: #start the loop for running sum
    total += n #add the value to total
    result.append(total) #append the sum to result list
  return(result)
print(runningSum([10,20,5,1]))

"""**SUM**"""

#Sum Sample ip=10,20,5,1  Expected op=36
def Sum(a,b,c,d):
  result = a+b+c+d #Empty list
  print(result)
Sum(10,20,5,1)

"""**Count Even number in a list**"""

#Count Even number in a list
#Count Even number
#Sample input (3,7,2,9,5)
#Expected output : 1

def CountEven(nums):
  count = 0
  for n in nums:
    if n%2==0:
      count +=1
  return count
print(CountEven([3,7,2,9,5]))

"""**Reverse a list**"""

#Reverse a list
#Reverse a list:
#Input: [1,2,3,4]
#Expected output: [4,3,2,1]

def reverseList(nums):
  return nums[::-1]
print(reverseList([1,2,3,4]))

#Slicing the list
my_list = [10,5,1,0,-67]
# The list sliced from the beginning to end, taking every second element
print(my_list[::3])

"""**Find Maximum number in the list**"""

# #Find Maximum number in the list
# input[3,7,2,9,5]
# Expected output:9

def FindMax(nums):
  max_num = nums[0]#Assign first of list as maximum
  for n in nums:
    if n>max_num:
      max_num = n
  return max_num
print(FindMax([3,7,2,9,5]))

"""**Find Minimum number in the list**"""

# #Find Minimum number in the list
# input[3,7,2,9,5]
# Expected output:2

def FindMin(nums):
  min_num = nums[0]#Assign first of list as minimum
  for n in nums:
    if n<min_num:
      min_num = n
  return min_num
print(FindMin([3,7,2,9,5]))

"""**Merge 2 sorted list**"""

#Merge 2 sorted list
#Input: [1,3,5],[2,4,6]
#Output: [1,2,3,4,5,6]

def mergeList(list1,list2):
  return sorted(list1 + list2)
print(mergeList([1,3,5],[2,4,6]))

"""**Square of a sorted list**"""

#Square of a sorted list

def SortedSquare(nums):
  return sorted([x**2 for x in nums])
# List comprehension: Defines a list based on iteration that is
#[x**2 for x in nums]
#is defined to find square of elements in the sorted list
print(SortedSquare([-4,-1,0,3,-50]))

def MaxDeposit(accounts):
  return max(sum(cust) for cust in accounts)
print(MaxDeposit([[100,52],[3,60]]))

"""**Find 2 indices where numbers add up to the target**"""

# Find 2 indices where numbers add up to the target
#Input: [2,7,11,15] target:26
#Expected Output: [2,3]

def twoSum(nums,target):
  #define a dictionary , a key value pair
  seen ={}
  for i,n in enumerate(nums):
    diff = target - n
    if diff in seen:
       return [seen[diff],i]
    seen[n] = i
    print(seen)
print(twoSum([2,7,11,15],26))